package com.tjpu.dao;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.opensymphony.xwork2.ActionContext;
import com.tjpu.bean.Announcement;
import com.tjpu.bean.Attendence;
import com.tjpu.bean.Certify1;
import com.tjpu.bean.ClassTeacher;
import com.tjpu.bean.Dept;
import com.tjpu.bean.Evalution;
import com.tjpu.bean.Leave;
import com.tjpu.bean.MD5;
import com.tjpu.bean.Student;
import com.tjpu.bean.Teacher;
import com.tjpu.bean.User;

@Repository
@Transactional
public class ManageDaoImpl implements ManageDao {
	@Autowired
	SessionFactory sessionFactory;
	@SuppressWarnings("unchecked")
	@Override
	public List<Teacher> loginDao(String usernum, String password) {
		// TODO Auto-generated method stub
		String pass = MD5.generate(password);
		String queryString = "from Teacher u where  u.identificationnum=:usernum and u.password=:pwd  ";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setString("usernum", usernum);
		query.setString("pwd",pass );
		List<Teacher> loginuser = (List<Teacher>) query.list();
		return loginuser;
	}
	@Override
	public void evalutionteacheradd(Evalution evalution) {
		// TODO Auto-generated method stub
		sessionFactory.getCurrentSession().save(evalution);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Evalution> loadevalution(Integer id) {
		// TODO Auto-generated method stub
		String queryString ="from Evalution e where e.courseid=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setInteger("id", id);
		List<Evalution> evalutionlist = (List<Evalution>)query.list();
		return evalutionlist;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Teacher> loadteacher(int i, int pageSize) {
		// TODO Auto-generated method stub
		String queryString = "from Teacher s ";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setFirstResult(i);
		query.setMaxResults(pageSize);
		List<Teacher> teacher = (List<Teacher>) query.list();
		return teacher;
	}
	@Override
	public void teacherupdate(Teacher teacher) {
		// TODO Auto-generated method stub
		Teacher teachers = (Teacher)sessionFactory.getCurrentSession().load(Teacher.class, teacher.getId());
		//teachers.setBrithdate(teacher.getBrithdate());
		teachers.setPosition(teacher.getPosition());
		teachers.setSex(teacher.getSex());
		teachers.setEmail(teacher.getEmail());
		teachers.setIdentificationnum(teacher.getIdentificationnum());
		teachers.setTeachername(teacher.getTeachername());
		teachers.setTelephone(teacher.getTelephone());
		sessionFactory.getCurrentSession().update(teachers);
	}
	@Override
	public void teacherdelete(int stuid) {
		// TODO Auto-generated method stub
		Teacher teacher = (Teacher)sessionFactory.getCurrentSession().load(Teacher.class, stuid);
		//teacher.setClasses(null);
		sessionFactory.getCurrentSession().delete(teacher);
	}
	@Override
	public void stuattendenceadd(Attendence attendence) {
		// TODO Auto-generated method stub
		sessionFactory.getCurrentSession().save(attendence);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Attendence> loadattendence(Attendence attendence ,String sid) {
		// TODO Auto-generated method stub
		String date = attendence.getDate();
		String time = attendence.getTime();
		String queryString ="from Attendence a where a.stuid=:stuid and a.date=:date and a.time=:time";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setString("stuid", sid);
		query.setString("date", date);
		query.setString("time", time);
		List<Attendence> attendences = (List<Attendence>)query.list();
		return attendences;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Attendence> attendencestulist(int i) {
		// TODO Auto-generated method stub
		String queryString = "from Attendence a where a.choosencourseid=:i";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setInteger("i", i);
		List<Attendence> attendences = (List<Attendence>) query.list();
		return attendences;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Attendence> searchstuattendence(Attendence attendence) {
		// TODO Auto-generated method stub
		Integer courseid = null;
		String date = null;
		String type = null;
		String stuid = null;
		User user = (User) ActionContext.getContext().getSession().get("user");
		stuid = String.valueOf(user.getId());
		List<Attendence> attendences = new ArrayList<Attendence>();
		try {
			date = java.net.URLDecoder.decode(attendence.getDate(),"UTF-8");
			type = java.net.URLDecoder.decode(attendence.getType(),"UTF-8");
			courseid = attendence.getChoosencourseid();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (date.length()==0) {//日期为空
			if (type.length()==0) {//只有课程
			  String queryString = "from Attendence a where a.stuid=:stuid and a.choosencourseid=:courseid";
			  Query query = sessionFactory.getCurrentSession().createQuery(queryString);
			  query.setInteger("courseid", courseid);
			  query.setString("stuid", stuid);
			  attendences = (List<Attendence>)query.list();
			}else {//课程和考勤状态
				if (courseid==null) {
					String queryString = "from Attendence a where a.stuid=:stuid  and a.type=:type";
					Query query = sessionFactory.getCurrentSession().createQuery(queryString);
					//query.setInteger("courseid", courseid);
					query.setString("stuid", stuid);
					query.setString("type", type);
					attendences = (List<Attendence>)query.list();
				}else {
					String queryString = "from Attendence a where a.stuid=:stuid and a.choosencourseid=:courseid and a.type=:type";
					Query query = sessionFactory.getCurrentSession().createQuery(queryString);
				    query.setInteger("courseid", courseid);
					query.setString("stuid", stuid);
					query.setString("type", type);
					attendences = (List<Attendence>)query.list();
				}				  
			}
		}else {//日期不为空
			if (type.length()==0) {//日期和考勤类型
				if (courseid==null) {
					String queryString = "from Attendence a where a.stuid=:stuid and a.date=:date";
					  Query query = sessionFactory.getCurrentSession().createQuery(queryString);
					  //query.setInteger("courseid", courseid);
					  query.setString("stuid", stuid);
					  query.setString("date", date);
					  attendences = (List<Attendence>)query.list();
				}else {
					String queryString = "from Attendence a where a.stuid=:stuid and a.choosencourseid=:courseid and a.date=:date";
					  Query query = sessionFactory.getCurrentSession().createQuery(queryString);
					  query.setInteger("courseid", courseid);
					  query.setString("stuid", stuid);
					  query.setString("date", date);
					  attendences = (List<Attendence>)query.list();
				}
				  
			}else {
				if (courseid==null) {
					String queryString = "from Attendence a where a.stuid=:stuid  and a.date=:date and a.type=:type";
					  Query query = sessionFactory.getCurrentSession().createQuery(queryString);
					  //query.setInteger("courseid", courseid);
					  query.setString("stuid", stuid);
					  query.setString("date", date);
					  query.setString("type", type);
					  attendences = (List<Attendence>)query.list();
				}else {
					 String queryString = "from Attendence a where a.stuid=:stuid and a.choosencourseid=:courseid and a.date=:date and a.type=:type";
					  Query query = sessionFactory.getCurrentSession().createQuery(queryString);
					  query.setInteger("courseid", courseid);
					  query.setString("stuid", stuid);
					  query.setString("date", date);
					  query.setString("type", type);
					  attendences = (List<Attendence>)query.list();
				}				 
			}
		}
		return attendences;
	}
	@Override
	public void leaveadd(Leave leave) {
		// TODO Auto-generated method stub
		sessionFactory.getCurrentSession().save(leave);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Leave> stuleave(int i, int pageSize) {
		// TODO Auto-generated method stub
		String queryString = "from Leave l ";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setFirstResult(i);
		query.setMaxResults(pageSize);
		List<Leave> stuleave = (List<Leave>) query.list();
		return stuleave;
	}
	@Override
	public void stuleaveupdate(Leave leave) {
		// TODO Auto-generated method stub
		Leave leave1 = (Leave)sessionFactory.getCurrentSession().load(Leave.class, leave.getId());
		leave1.setStatus(leave.getStatus());
		sessionFactory.getCurrentSession().update(leave1);
	}
	@Override
	public void leavedelete(Leave leave) {
		// TODO Auto-generated method stub
		Leave leave2 = (Leave)sessionFactory.getCurrentSession().load(Leave.class, leave.getId());
		sessionFactory.getCurrentSession().delete(leave2);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Attendence> courseattendencesearch(Integer courseid, String type) {
		// TODO Auto-generated method stub
		String querysString ="from Attendence a where a.choosencourseid=:courseid and a.type=:type";
		Query query = sessionFactory.getCurrentSession().createQuery(querysString);
		query.setInteger("courseid", courseid);
		query.setString("type", type);
		List<Attendence> attendences = (List<Attendence>)query.list();
		return attendences;
	}
	@Override
	public void teacheradd(Teacher teacher, Integer depid) {
		// TODO Auto-generated method stub
		Dept dept = (Dept)sessionFactory.getCurrentSession().load(Dept.class, depid);
		teacher.setDeptid(depid);
		sessionFactory.getCurrentSession().save(teacher);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Teacher> teachercheck(String identificationnum) {
		// TODO Auto-generated method stub
		String queryString ="from Teacher t where t.identificationnum=:identificationnum";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setString("identificationnum", identificationnum);
		List<Teacher> teachers = (List<Teacher>)query.list();
		return teachers;
	}
	@SuppressWarnings("unchecked")
	@Override
	public Teacher loadteacherbyid(Integer id) {
		// TODO Auto-generated method stub
		String querysString ="from Teacher t where t.id=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(querysString);
		query.setInteger("id", id);
		List<Teacher> teachers = (List<Teacher>)query.list();
		return teachers.get(0);
	}
	@Override
	public void announcementadd(Announcement announcement) {
		// TODO Auto-generated method stub
		sessionFactory .getCurrentSession().save(announcement);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Announcement> announcementlist(int i, int pageSize) {
		// TODO Auto-generated method stub
		String queryString = "from Announcement a order by a.id desc";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setFirstResult(i);
		query.setMaxResults(pageSize);
		List<Announcement> announcements = (List<Announcement>) query.list();
		return announcements;
	}
	@SuppressWarnings("unchecked")
	@Override
	public Announcement loadannouncement(Integer id) {
		// TODO Auto-generated method stub
		String queryString ="from Announcement a where a.id=:id order by a.id desc";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setInteger("id", id);
		List<Announcement> announcements = (List<Announcement>)query.list();
		return announcements.get(0);
	}
	@Override
	public void announcementupdate(Announcement announcement) {
		// TODO Auto-generated method stub
		Announcement announcement2 = (Announcement)sessionFactory.getCurrentSession().load(Announcement.class, announcement.getId());
		announcement2.setTitle(announcement.getTitle());
		announcement2.setContent(announcement.getContent());
		announcement2.setCreatedtime(announcement.getCreatedtime());
		sessionFactory.getCurrentSession().update(announcement2);
	}
	@Override
	public void announcementdelete(Integer id) {
		// TODO Auto-generated method stub
		Announcement announcement = (Announcement)sessionFactory.getCurrentSession().load(Announcement.class, id);
		sessionFactory.getCurrentSession().delete(announcement);
	}
	@Override
	public void justiceladd(Certify1 certify1) {
		// TODO Auto-generated method stub
		sessionFactory.getCurrentSession().save(certify1);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Certify1> loadjusticel() {
		// TODO Auto-generated method stub
		String querysString = "from Certify1 c ";
		Query query = sessionFactory.getCurrentSession().createQuery(querysString);
		List<Certify1> justicellist = (List<Certify1>)query.list();
		return justicellist;
	}
	@Override
	public void justiceldelete(Integer id) {
		// TODO Auto-generated method stub
		Certify1 certify1 = (Certify1)sessionFactory.getCurrentSession().load(Certify1.class, id);
		sessionFactory.getCurrentSession().delete(certify1);
	}
	@SuppressWarnings("unchecked")
	@Override
	public Certify1 loadjusticelbyid(Integer id) {
		// TODO Auto-generated method stub
		String queryString ="from Certify1 c where c.id=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setInteger("id", id);
		List<Certify1> certify1s = (List<Certify1>)query.list();
		return certify1s.get(0);
	}
	@Override
	public void justicelupdate(Certify1 certify) {
		// TODO Auto-generated method stub
		Certify1 certify1 = (Certify1)sessionFactory.getCurrentSession().load(Certify1.class, certify.getId());
		certify1.setCreatedtime(certify.getCreatedtime());
		certify1.setFileplace(certify.getFileplace());
		certify1.setTitle(certify.getTitle());
		sessionFactory.getCurrentSession().update(certify1);		
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Announcement> loadannouncementlist() {
		// TODO Auto-generated method stub
		String querystrString = "from Announcement a order by a.id desc  ";
		Query query = sessionFactory.getCurrentSession().createQuery(querystrString);
		query.setFirstResult(0); 
		query.setMaxResults(10);
		List<Announcement> announcementlist = (List<Announcement>)query.list();
		return announcementlist;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Attendence> personattendence() {
		// TODO Auto-generated method stub
		User user = (User) ActionContext.getContext().getSession().get("user");
		String stuid = String.valueOf(user.getId());
		String querString = "from Attendence a where a.stuid=:stuid";
		Query query = sessionFactory.getCurrentSession().createQuery(querString);
		query.setString("stuid", stuid);
		List<Attendence> attendences = (List<Attendence>)query.list();
		return attendences;
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<Attendence> loadattendencebycourseid(Integer id) {
		// TODO Auto-generated method stub
		String querString = "from Attendence a where a.choosencourseid=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(querString);
		query.setInteger("id", id);
		List<Attendence> attendences = (List<Attendence>)query.list();
		return attendences;
	}
	@Override
	public void changeimg(String imgurl, Teacher teacher2) {
		// TODO Auto-generated method stub
		Teacher teacher = (Teacher)sessionFactory.getCurrentSession().load(Teacher.class, teacher2.getId());
		teacher.setImgurl(imgurl);
		sessionFactory.getCurrentSession().update(teacher);
	}
	@SuppressWarnings("unchecked")
	@Override
	public Leave loadleavebyid(Integer id) {
		// TODO Auto-generated method stub
		String querysString = "from Leave l where l.id=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(querysString);
		query.setInteger("id", id);
		List<Leave> leaves = (List<Leave>)query.list();
		return leaves.get(0);
	}
	@Override
	public long totalteacher() {
		// TODO Auto-generated method stub
		String hql = "select count(*) from Teacher";
		Query query = sessionFactory.getCurrentSession().createQuery(hql);
		long total = ((Number) query.uniqueResult()).intValue();
		return total;
	}
	@Override
	public long totalstuleave() {
		// TODO Auto-generated method stub
		String hql = "select count(*) from Leave";
		Query query = sessionFactory.getCurrentSession().createQuery(hql);
		long total = ((Number) query.uniqueResult()).intValue();
		return total;
	}
	@Override
	public long totalannouncement() {
		// TODO Auto-generated method stub
		String hql = "select count(*) from Announcement";
		Query query = sessionFactory.getCurrentSession().createQuery(hql);
		long total = ((Number) query.uniqueResult()).intValue();
		return total;
	}
}
