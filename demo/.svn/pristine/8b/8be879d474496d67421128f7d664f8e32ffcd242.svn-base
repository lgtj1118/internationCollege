package com.tjpu.service;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import javax.print.attribute.HashAttributeSet;

import org.apache.poi.ss.formula.functions.WeekdayFunc;
import org.hibernate.mapping.Array;

import com.tjpu.bean.ChosenCourse;
import com.tjpu.bean.ClassesModel;
import com.tjpu.bean.ClassroomModel;
import com.tjpu.bean.CourseModel;
import com.tjpu.bean.TeacherModel;


/**
 * @author SiyuLi
 *
 */
public class CourseArrangement {
	private BitSet time_table[][][] = null;
	private List<ChosenCourse>  unable = new ArrayList<ChosenCourse>();
	private List<ClassroomModel> rooms = null;
	private List<ChosenCourse> courses = null;
	public List<ChosenCourse> getCourses() {
		return courses;
	}
	private static final int weekday = 5;
	private static final int slot = 5;
	private static int roomNum = 0;
	public CourseArrangement (List<ChosenCourse> courses, List<ClassroomModel> rooms){
		this.courses = generateUnrelateCourseSequence(courses);
		this.rooms = rooms;
		roomNum = rooms.size();
		buildOriginalBitTable();
		for (int i = 0; i < courses.size(); ++i){
			Spacetime st = placeAndDoConstraint(i);
			setSpacetimeToChosenCourse (i,st);
		}
		
	}
	
	/**
	 * @param course
	 * @return
	 */
	public List<ChosenCourse> otherOption (ChosenCourse course) {
		if (!courses.contains(course))
			return null;
		List<ChosenCourse> option = new ArrayList<ChosenCourse>();
		List<Spacetime> forbidden = new ArrayList<CourseArrangement.Spacetime>();
		/*
		 *得到不可放置的位置
		 *1.当天已放置相同课程，则一天都不可放置
		 *2.老师不能同时出现不同地点
		 *3.班级不能同时出现不同地点
		 *4.至少包含原位置
		 *5.教室类型约束
		*/
		for (ChosenCourse c : courses){
			if (c.getCourse().getCoursename().equals(course.getCourse().getCoursename())
					&& c.getClasses().equals(course.getClass()))
				forbidden.add()
		}
	}
	
	
	
	private Spacetime forbiddenSpacetime(ChosenCourse course){
		return new Spacetime(course.getWeekday(), course.getSlot(), rooms.indexOf(course.getRoom()));
	}
	
	/**
	 * @return
	 */
	public Map<TeacherModel, List<ChosenCourse>> AllTeacherSchedule(){
		Map<TeacherModel, List<ChosenCourse>> all = new HashMap<TeacherModel, List<ChosenCourse>>();
		Set<TeacherModel> teacherSet = teacherList();
		for (TeacherModel t:teacherSet)
			all.put(t, getSpecificTeacherTable(t));
		return all;
	}
	
	/**
	 * @param teacher
	 * @return
	 */
	private List<ChosenCourse> getSpecificTeacherTable (TeacherModel teacher){
		List<ChosenCourse> table = new ArrayList<ChosenCourse>();
		for (ChosenCourse c : courses)
			if (c.getTeacher().equals(teacher))
				table.add(c);
		return table;
	}
	
	/**
	 * @return
	 */
	private Set<TeacherModel> teacherList (){
		Set<TeacherModel> teachers = new HashSet<TeacherModel>();
		for (ChosenCourse c : courses)
			teachers.add(c.getTeacher());
		return teachers;
	}
	
	/**
	 * @param offset
	 * @param st
	 */
	private void setSpacetimeToChosenCourse (int offset, Spacetime st){
		if (st == null)
			return;
		courses.get(offset).setRoom(rooms.get(st.getRoom()));
		courses.get(offset).setSlot(st.getSlot());
		courses.get(offset).setWeekday(st.getDay());
	}
	
	/**
	 * @param courses
	 * @return
	 */
	private List<ChosenCourse> generateUnrelateCourseSequence (List<ChosenCourse> courses){
		Set<String> roomTypes = new HashSet<String>();
		List<ChosenCourse> seq = new ArrayList<ChosenCourse>();
		for (ClassroomModel room : rooms)
			roomTypes.add(room.getRoomtype());
		for (String type : roomTypes){
			List<ChosenCourse> thisType = getCertainRoomType(type);
			if (thisType.size() == 0)
				continue;
			BitSet isPlaced = new BitSet(thisType.size());
			seq.add(thisType.get(0));
			isPlaced.set(0);
			for (int i = 0; i < thisType.size() - 1; ++i){
				seq.add(getMostUnrelateCourse(thisType, seq.get(seq.size() - 1), isPlaced));
				isPlaced.set(thisType.indexOf(seq.get(seq.size() - 1)));
			}
		}
		return seq;
	}
	
	/**
	 * @param pervSet
	 * @param course
	 * @param isPlaced
	 * @return 某一与当前课程最无关的课程
	 */
	private ChosenCourse getMostUnrelateCourse (List<ChosenCourse> pervSet, ChosenCourse course, BitSet isPlaced){
		List<ChosenCourse> candSet = new ArrayList<ChosenCourse>();	//候选课程列表
		for (int i = 0; i < pervSet.size(); ++i)
			if (!isPlaced.get(i))
				candSet.add(pervSet.get(i));
		/*计算无关程度的比重，使用曼哈顿距离*/
		int teacherWeight = 2, classWeight = 1;
		List<Integer> distant = new ArrayList<Integer>();
		for (ChosenCourse cand : candSet){
			Integer t = 0;
			if (cand.getTeacher().equals(course.getTeacher())) t += teacherWeight;
			for (ClassesModel c : course.getClasses())
				if (cand.getClasses().contains(c))
					t += classWeight;
			distant.add(t);
		}
	
		if (distant.contains(0)){ /*一般都会有完全无关的课程*/
			List<Integer> zero = new ArrayList<Integer>();
			for (int i = 0; i < distant.size(); ++i)
				if (distant.get(i) == 0)
					zero.add(i);
			return candSet.get((new Random().nextInt(zero.size())));
		} else{ /*选择相关度最小的课程, 除非最后几个课程一般不会执行到这里*/
			int minOffset = 0;
			for (int i = 1; i < distant.size(); ++i)
				if (distant.get(i) < distant.get(minOffset))
					minOffset = i;
			return candSet.get(minOffset);
		}
	}
	
	/**
	 * @param roomType
	 * @param capacity
	 * @return
	 */
	private List<ChosenCourse> getCertainRoomType (String roomType){
		List<ChosenCourse> rType = new ArrayList<ChosenCourse>();
		for (ChosenCourse c : courses)
			if (c.getRoomType().equals(roomType))
				rType.add(c);
		return rType;
	}
	
	/**
	 * @param courseOffset
	 * @return null or Spacetime
	 */
	private Spacetime placeAndDoConstraint(int courseOffset){
		Spacetime st = findPossibleSpacetimeAndPlaceIt(courseOffset);
		if (st != null){
			teacherUniqueness(courseOffset,st);
			classUniquencess(courseOffset,st);
		} else {
			unable.add(courses.get(courseOffset));
			System.out.println("ErrLog unable to place " +  courses.get(courseOffset).getCourse().getCoursename());
		}
		return st;
	}
	
	/**
	 * @param courseOffset
	 * @param st
	 * 班级的唯一性约束， 一个班级在同一天中不能上同一门课
	 */
	private void classUniquencess (int courseOffset, Spacetime st){
		List<ClassesModel> classes = courses.get(courseOffset).getClasses();
		List<Integer> offsets = new ArrayList<Integer>();	//包含当前班级的课程偏移量列表
		for (int i = 0; i < courses.size(); ++i)
			for (ClassesModel k : classes)
				if (courses.get(i).getClasses().contains(k))
					offsets.add(i);
		/*班级唯一性约束*/
		for (int r = 0; r < rooms.size(); ++r)
			for (Integer i : offsets)
				noPlace(i, r, st.getDay(), st.getSlot());
		/*一天之内不能上同一节课*/
		List <Integer> sameCourseOffset = new ArrayList<Integer>();
		for (int i = 0; i < courses.size(); ++i)
			if (i != courseOffset && courses.get(i).equals(courses.get(courseOffset)))
				sameCourseOffset.add(i);
		for (int i = 0; i < sameCourseOffset.size(); ++i)
			for (int r = 0; r < rooms.size(); ++r)
				for (int s = 0; s < slot; ++s)
					noPlace(courseOffset, r, st.getDay(), s);
					
	}
	
	/**
	 * @param courseOffset
	 * @param st
	 * 教师的唯一性约束
	 */
	private void teacherUniqueness (int courseOffset, Spacetime st){
		int tid = courses.get(courseOffset).getTeacher().getId();
		List<Integer> coursesOfSameTeacher = new ArrayList<Integer>();
		//找到当前课程老师要上的所有课
		for (int i = 0; i < courses.size(); ++i)
			if (courses.get(i).getTeacher().getId() ==  tid)
				coursesOfSameTeacher.add(i);
		//取消该教师当前时段的所有课程
		for (int r = 0; r < rooms.size(); ++r)
			for (int i = 0; i < coursesOfSameTeacher.size(); ++i)
				noPlace (coursesOfSameTeacher.get(i), r, st.getDay(),st.getSlot());
	}
	
	/**
	 * @param courseOffset
	 * @return 如果能放置则返回放置的时间地点，否则返回空 
	 */
	private Spacetime findPossibleSpacetimeAndPlaceIt (int courseOffset){
		for (int s = 0; s < slot; ++s)
			for (int d = 0; d < weekday; ++d)
				for (int r = 0; r < rooms.size(); ++r)
					if (time_table[r][d][s].get(courseOffset)) {
						Spacetime st = new Spacetime(d, s, r);
						setCourse(st);
						return st;
					}
		return null;
	}
	
	
	/**
	 * @param courseOffset
	 * @param room
	 * @param day
	 * @param slot
	 * 表示某个时间地点不能放置某课程
	 */
	private void noPlace (int courseOffset, int room, int day, int slot){
		time_table[room][day][slot].set(courseOffset, false);
	}
	
	/**
	 * @param st 时间地点
	 * 用于把某个时间地点清空
	 */
	private void setCourse (Spacetime st) {
		time_table[st.getRoom()][st.getDay()][st.getSlot()].clear();
	}
	
	/**
	 * 建立原始表，并放入所有课程
	 */
	private void buildOriginalBitTable (){
		time_table = new BitSet[rooms.size()][weekday][slot];
		//初始化 BitSet
		for (int r = 0; r < rooms.size(); ++r) 
			for (int d = 0; d < weekday; ++d)
				for (int s = 0; s < slot; ++s)
					time_table[r][d][s] = new BitSet(courses.size());
		//填入相应课程的下标
		for (int c = 0; c < courses.size(); ++c) 
			for (int r = 0; r < rooms.size(); ++r)
				//判断某课程是否能使用某教室
				if (Util.lessOrEqual(rooms.get(r).getRealcapacity(), courses.get(c).getStudentNum())
						&& rooms.get(r).getRoomtype().equals(courses.get(c).getRoomType()))
					for (int d = 0; d < weekday; ++d)
						for (int s = 0; s < slot; ++s)
							time_table[r][d][s].set(c);
	}
	
	/**
	 * @author SiyuLi
	 * 静态工具类
	 */
	private static class Util {
		public static boolean lessOrEqual (String a, int b){
			return Integer.parseInt(a) <= b;
		}
		
		public static List<Spacetime> spacetimeList (Spacetime st) {
			List<Spacetime> ret = new ArrayList<CourseArrangement.Spacetime>();
			if (st.getDay() == 0)
				
		}
	}
	public List<ChosenCourse> getUnableCourses() {
		return unable;
	}
	
	/**
	 * @author SiyuLi
	 * 用于传递时间与地点的内部类
	 */
	private class Spacetime {
		public Spacetime(int day, int slot, int room){
			this.day = day;
			this.room = room;
			this.slot = slot;
		}
		private int day;
		private int slot;
		private int room;
		public String toString () {
			return String.format("room%d, day%s, slot%s", room, day, slot);
		}
		public int getDay() {
			return day;
		}
		public void setDay(int day) {
			this.day = day;
		}
		public int getSlot() {
			return slot;
		}
		public void setSlot(int slot) {
			this.slot = slot;
		}
		public int getRoom() {
			return room;
		}
		public void setRoom(int room) {
			this.room = room;
		}
	}
}





















