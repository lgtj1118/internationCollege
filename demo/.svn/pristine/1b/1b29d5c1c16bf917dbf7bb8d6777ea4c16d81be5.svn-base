package com.tjpu.dao;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.opensymphony.xwork2.ActionContext;
import com.tjpu.bean.Adjustcourse;
import com.tjpu.bean.Announcement;
import com.tjpu.bean.Attendence;
import com.tjpu.bean.Certify1;
import com.tjpu.bean.ChosenCourse;
import com.tjpu.bean.ChosenCourseModel;
import com.tjpu.bean.ClassTeacher;
import com.tjpu.bean.Classes;
import com.tjpu.bean.ClassesModel;
import com.tjpu.bean.Course;
import com.tjpu.bean.Dept;
import com.tjpu.bean.Evalution;
import com.tjpu.bean.Leave;
import com.tjpu.bean.MD5;
import com.tjpu.bean.SemesterChosenClassroom;
import com.tjpu.bean.SemesterChosenCourse;
import com.tjpu.bean.Student;
import com.tjpu.bean.Teacher;
import com.tjpu.bean.User;

@Repository
@Transactional
public class ManageDaoImpl implements ManageDao {
	@Autowired
	SessionFactory sessionFactory;
	@SuppressWarnings("unchecked")

	public List<Teacher> loginDao(String usernum, String password) {
		
		String pass = MD5.generate(password);
		String queryString = "from Teacher u where  u.identificationnum=:usernum and u.password=:pwd  ";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setString("usernum", usernum);
		query.setString("pwd",pass );
		List<Teacher> loginuser = (List<Teacher>) query.list();
		return loginuser;
	}

	public void evalutionteacheradd(Evalution evalution) {
		
		sessionFactory.getCurrentSession().save(evalution);
	}
	@SuppressWarnings("unchecked")

	public List<Evalution> loadevalution(Integer id) {
		
		String queryString ="from Evalution e where e.courseid=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setInteger("id", id);
		List<Evalution> evalutionlist = (List<Evalution>)query.list();
		return evalutionlist;
	}
	@SuppressWarnings("unchecked")

	public List<Teacher> loadteacher(int i, int pageSize) {
		
		String queryString = "from Teacher s order by s.identificationnum ";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setFirstResult(i);
		query.setMaxResults(pageSize);
		List<Teacher> teacher = (List<Teacher>) query.list();
		return teacher;
	}

	public void teacherupdate(Teacher teacher) {
		
		Teacher teachers = (Teacher)sessionFactory.getCurrentSession().load(Teacher.class, teacher.getId());
		//teachers.setBrithdate(teacher.getBrithdate());
		teachers.setPosition(teacher.getPosition());
		teachers.setSex(teacher.getSex());
		teachers.setEmail(teacher.getEmail());
		teachers.setIdentificationnum(teacher.getIdentificationnum());
		teachers.setTeachername(teacher.getTeachername());
		teachers.setTelephone(teacher.getTelephone());
		sessionFactory.getCurrentSession().update(teachers);
	}

	public void teacherdelete(int stuid) {
		
		Teacher teacher = (Teacher)sessionFactory.getCurrentSession().load(Teacher.class, stuid);
		//teacher.setClasses(null);
		sessionFactory.getCurrentSession().delete(teacher);
	}

	public void stuattendenceadd(Attendence attendence) {
		
		sessionFactory.getCurrentSession().save(attendence);
	}
	@SuppressWarnings("unchecked")

	public List<Attendence> loadattendence(Attendence attendence ,String sid) {
		
		String date = attendence.getDate();
		String time = attendence.getTime();
		String queryString ="from Attendence a where a.stuid=:stuid and a.date=:date and a.time=:time";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setString("stuid", sid);
		query.setString("date", date);
		query.setString("time", time);
		List<Attendence> attendences = (List<Attendence>)query.list();
		return attendences;
	}
	@SuppressWarnings("unchecked")

	public List<Attendence> attendencestulist(int i) {
		
		String queryString = "from Attendence a where a.choosencourseid=:i";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setInteger("i", i);
		List<Attendence> attendences = (List<Attendence>) query.list();
		return attendences;
	}
	@SuppressWarnings("unchecked")

	public List<Attendence> searchstuattendence(Attendence attendence) {
		
		Integer courseid = null;
		String date = null;
		String type = null;
		String stuid = null;
		User user = (User) ActionContext.getContext().getSession().get("user");
		stuid = String.valueOf(user.getId());
		List<Attendence> attendences = new ArrayList<Attendence>();
		try {
			date = java.net.URLDecoder.decode(attendence.getDate(),"UTF-8");
			type = java.net.URLDecoder.decode(attendence.getType(),"UTF-8");
			courseid = attendence.getChoosencourseid();
		} catch (UnsupportedEncodingException e) {
			
			e.printStackTrace();
		}
		if (date.length()==0) {//日期为空
			if (type.length()==0) {//只有课程
			  String queryString = "from Attendence a where a.stuid=:stuid and a.choosencourseid=:courseid";
			  Query query = sessionFactory.getCurrentSession().createQuery(queryString);
			  query.setInteger("courseid", courseid);
			  query.setString("stuid", stuid);
			  attendences = (List<Attendence>)query.list();
			}else {//课程和考勤状态
				if (courseid==null) {
					String queryString = "from Attendence a where a.stuid=:stuid  and a.type=:type";
					Query query = sessionFactory.getCurrentSession().createQuery(queryString);
					//query.setInteger("courseid", courseid);
					query.setString("stuid", stuid);
					query.setString("type", type);
					attendences = (List<Attendence>)query.list();
				}else {
					String queryString = "from Attendence a where a.stuid=:stuid and a.choosencourseid=:courseid and a.type=:type";
					Query query = sessionFactory.getCurrentSession().createQuery(queryString);
				    query.setInteger("courseid", courseid);
					query.setString("stuid", stuid);
					query.setString("type", type);
					attendences = (List<Attendence>)query.list();
				}				  
			}
		}else {//日期不为空
			if (type.length()==0) {//日期和考勤类型
				if (courseid==null) {
					String queryString = "from Attendence a where a.stuid=:stuid and a.date=:date";
					  Query query = sessionFactory.getCurrentSession().createQuery(queryString);
					  //query.setInteger("courseid", courseid);
					  query.setString("stuid", stuid);
					  query.setString("date", date);
					  attendences = (List<Attendence>)query.list();
				}else {
					String queryString = "from Attendence a where a.stuid=:stuid and a.choosencourseid=:courseid and a.date=:date";
					  Query query = sessionFactory.getCurrentSession().createQuery(queryString);
					  query.setInteger("courseid", courseid);
					  query.setString("stuid", stuid);
					  query.setString("date", date);
					  attendences = (List<Attendence>)query.list();
				}
				  
			}else {
				if (courseid==null) {
					String queryString = "from Attendence a where a.stuid=:stuid  and a.date=:date and a.type=:type";
					  Query query = sessionFactory.getCurrentSession().createQuery(queryString);
					  //query.setInteger("courseid", courseid);
					  query.setString("stuid", stuid);
					  query.setString("date", date);
					  query.setString("type", type);
					  attendences = (List<Attendence>)query.list();
				}else {
					 String queryString = "from Attendence a where a.stuid=:stuid and a.choosencourseid=:courseid and a.date=:date and a.type=:type";
					  Query query = sessionFactory.getCurrentSession().createQuery(queryString);
					  query.setInteger("courseid", courseid);
					  query.setString("stuid", stuid);
					  query.setString("date", date);
					  query.setString("type", type);
					  attendences = (List<Attendence>)query.list();
				}				 
			}
		}
		return attendences;
	}

	public void leaveadd(Leave leave) {
		
		sessionFactory.getCurrentSession().save(leave);
	}
	@SuppressWarnings("unchecked")

	public List<Leave> stuleave(int i, int pageSize) {
		
		String queryString = "from Leave l ";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setFirstResult(i);
		query.setMaxResults(pageSize);
		List<Leave> stuleave = (List<Leave>) query.list();
		return stuleave;
	}

	public void stuleaveupdate(Leave leave) {
		
		Leave leave1 = (Leave)sessionFactory.getCurrentSession().load(Leave.class, leave.getId());
		leave1.setStatus(leave.getStatus());
		sessionFactory.getCurrentSession().update(leave1);
	}

	public void leavedelete(Leave leave) {
		
		Leave leave2 = (Leave)sessionFactory.getCurrentSession().load(Leave.class, leave.getId());
		sessionFactory.getCurrentSession().delete(leave2);
	}
	@SuppressWarnings("unchecked")

	public List<Attendence> courseattendencesearch(Integer courseid, String type) {
		
		String querysString ="from Attendence a where a.choosencourseid=:courseid and a.type=:type";
		Query query = sessionFactory.getCurrentSession().createQuery(querysString);
		query.setInteger("courseid", courseid);
		query.setString("type", type);
		List<Attendence> attendences = (List<Attendence>)query.list();
		return attendences;
	}

	public void teacheradd(Teacher teacher, Integer depid) {
		
		Dept dept = (Dept)sessionFactory.getCurrentSession().load(Dept.class, depid);
		teacher.setDeptid(depid);
		sessionFactory.getCurrentSession().save(teacher);
	}
	@SuppressWarnings("unchecked")

	public List<Teacher> teachercheck(String identificationnum) {
		
		String queryString ="from Teacher t where t.identificationnum=:identificationnum";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setString("identificationnum", identificationnum);
		List<Teacher> teachers = (List<Teacher>)query.list();
		return teachers;
	}
	@SuppressWarnings("unchecked")

	public Teacher loadteacherbyidentificationnum(String identificationnum) {
		
		String querysString ="from Teacher t where t.identificationnum=:identificationnum";
		Query query = sessionFactory.getCurrentSession().createQuery(querysString);
		query.setString("identificationnum", identificationnum);
		List<Teacher> teachers = (List<Teacher>)query.list();
		return teachers.get(0);
	}

	public void announcementadd(Announcement announcement) {
		
		sessionFactory .getCurrentSession().save(announcement);
	}
	@SuppressWarnings("unchecked")

	public List<Announcement> announcementlist(int i, int pageSize) {
		
		String queryString = "from Announcement a order by a.id desc";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setFirstResult(i);
		query.setMaxResults(pageSize);
		List<Announcement> announcements = (List<Announcement>) query.list();
		return announcements;
	}
	@SuppressWarnings("unchecked")

	public Announcement loadannouncement(Integer id) {
		
		String queryString ="from Announcement a where a.id=:id order by a.id desc";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setInteger("id", id);
		List<Announcement> announcements = (List<Announcement>)query.list();
		return announcements.get(0);
	}

	public void announcementupdate(Announcement announcement) {
		
		Announcement announcement2 = (Announcement)sessionFactory.getCurrentSession().load(Announcement.class, announcement.getId());
		announcement2.setTitle(announcement.getTitle());
		announcement2.setContent(announcement.getContent());
		announcement2.setCreatedtime(announcement.getCreatedtime());
		sessionFactory.getCurrentSession().update(announcement2);
	}

	public void announcementdelete(Integer id) {
		
		Announcement announcement = (Announcement)sessionFactory.getCurrentSession().load(Announcement.class, id);
		sessionFactory.getCurrentSession().delete(announcement);
	}

	public void justiceladd(Certify1 certify1) {
		
		sessionFactory.getCurrentSession().save(certify1);
	}
	@SuppressWarnings("unchecked")

	public List<Certify1> loadjusticel() {
		
		String querysString = "from Certify1 c ";
		Query query = sessionFactory.getCurrentSession().createQuery(querysString);
		List<Certify1> justicellist = (List<Certify1>)query.list();
		return justicellist;
	}

	public void justiceldelete(Integer id) {
		
		Certify1 certify1 = (Certify1)sessionFactory.getCurrentSession().load(Certify1.class, id);
		sessionFactory.getCurrentSession().delete(certify1);
	}
	@SuppressWarnings("unchecked")

	public Certify1 loadjusticelbyid(Integer id) {
		
		String queryString ="from Certify1 c where c.id=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(queryString);
		query.setInteger("id", id);
		List<Certify1> certify1s = (List<Certify1>)query.list();
		return certify1s.get(0);
	}

	public void justicelupdate(Certify1 certify) {
		
		Certify1 certify1 = (Certify1)sessionFactory.getCurrentSession().load(Certify1.class, certify.getId());
		certify1.setCreatedtime(certify.getCreatedtime());
		certify1.setFileplace(certify.getFileplace());
		certify1.setTitle(certify.getTitle());
		sessionFactory.getCurrentSession().update(certify1);		
	}
	@SuppressWarnings("unchecked")

	public List<Announcement> loadannouncementlist() {
		
		String querystrString = "from Announcement a order by a.id desc  ";
		Query query = sessionFactory.getCurrentSession().createQuery(querystrString);
		query.setFirstResult(0); 
		query.setMaxResults(10);
		List<Announcement> announcementlist = (List<Announcement>)query.list();
		return announcementlist;
	}
	@SuppressWarnings("unchecked")

	public List<Attendence> personattendence() {
		
		User user = (User) ActionContext.getContext().getSession().get("user");
		String stuid = String.valueOf(user.getId());
		String querString = "from Attendence a where a.stuid=:stuid";
		Query query = sessionFactory.getCurrentSession().createQuery(querString);
		query.setString("stuid", stuid);
		List<Attendence> attendences = (List<Attendence>)query.list();
		return attendences;
	}
	@SuppressWarnings("unchecked")

	public List<Attendence> loadattendencebycourseid(Integer id) {
		
		String querString = "from Attendence a where a.choosencourseid=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(querString);
		query.setInteger("id", id);
		List<Attendence> attendences = (List<Attendence>)query.list();
		return attendences;
	}

	public void changeimg(String imgurl, Teacher teacher2) {
		
		Teacher teacher = (Teacher)sessionFactory.getCurrentSession().load(Teacher.class, teacher2.getId());
		teacher.setImgurl(imgurl);
		sessionFactory.getCurrentSession().update(teacher);
	}
	@SuppressWarnings("unchecked")

	public Leave loadleavebyid(Integer id) {
		
		String querysString = "from Leave l where l.id=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(querysString);
		query.setInteger("id", id);
		List<Leave> leaves = (List<Leave>)query.list();
		return leaves.get(0);
	}

	public long totalteacher() {
		
		String hql = "select count(*) from Teacher";
		Query query = sessionFactory.getCurrentSession().createQuery(hql);
		long total = ((Number) query.uniqueResult()).intValue();
		return total;
	}

	public long totalstuleave() {
		
		String hql = "select count(*) from Leave";
		Query query = sessionFactory.getCurrentSession().createQuery(hql);
		long total = ((Number) query.uniqueResult()).intValue();
		return total;
	}

	public long totalannouncement() {
		
		String hql = "select count(*) from Announcement";
		Query query = sessionFactory.getCurrentSession().createQuery(hql);
		long total = ((Number) query.uniqueResult()).intValue();
		return total;
	}

	@SuppressWarnings("unchecked")

	public List<SemesterChosenCourse> semestercourselist() {
		
		String querystring = "from SemesterChosenCourse s ";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		List<SemesterChosenCourse> semestercourselist = (List<SemesterChosenCourse>)query.list();
		return semestercourselist;
	}


	public void semestercourseadd(SemesterChosenCourse semestercourse) {
		
		sessionFactory.getCurrentSession().save(semestercourse);
	}


	public void semestercoursedelete(int courseid) {
		
		SemesterChosenCourse semestercourse = (SemesterChosenCourse)sessionFactory.getCurrentSession().load(SemesterChosenCourse.class, courseid);
		sessionFactory.getCurrentSession().delete(semestercourse);
	}

	@SuppressWarnings("unchecked")

	public List<SemesterChosenCourse> loadsemestercoursebyid(int courseid,String semester) {
		
		String querystring = "from SemesterChosenCourse s where s.coursenum=:courseid and s.semester=:semester ";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		query.setString("courseid", String.valueOf(courseid));
		query.setString("semester", semester);
		List<SemesterChosenCourse> semestercourselist = (List<SemesterChosenCourse>)query.list();
		return semestercourselist;
	}

	@SuppressWarnings("unchecked")

	public List<SemesterChosenClassroom> semesterroomlist() {
		
		String querystring = "from SemesterChosenClassroom s ";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		List<SemesterChosenClassroom> semestercourselist = (List<SemesterChosenClassroom>)query.list();
		return semestercourselist;
	}

	@SuppressWarnings("unchecked")

	public List<SemesterChosenClassroom> loadsemesterroombyid(String roomnum, String semester) {
		
		String querystring = "from SemesterChosenClassroom s where s.num=:roomnum and s.semester=:semester ";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		query.setString("roomnum", roomnum);
		query.setString("semester", semester);
		List<SemesterChosenClassroom> semesterroomlist = (List<SemesterChosenClassroom>)query.list();
		return semesterroomlist;
	}


	public void semesterroomadd(SemesterChosenClassroom semesterroom) {
		
		sessionFactory.getCurrentSession().save(semesterroom);
	}


	public void semesterroomdelete(int roomid) {
		
		SemesterChosenClassroom semestercourse = (SemesterChosenClassroom)sessionFactory.getCurrentSession().load(SemesterChosenClassroom.class, roomid);
		sessionFactory.getCurrentSession().delete(semestercourse);
	}

	public void saveSyllabus(List<ChosenCourseModel> courses, String semester) {
		Query q = sessionFactory.getCurrentSession().createQuery("delete SemesterChosenCourse where semester=" + semester);
		q.executeUpdate();
		for (ChosenCourseModel course : courses){
			SemesterChosenCourse p = new SemesterChosenCourse();
			p.setBegainweek(String.valueOf(course.getBeginWeek()));
			String classes = "";
			for (ClassesModel c : course.getClasses())
				classes += String.valueOf(c.getId()) + "&";
			p.setClass_(classes);
			p.setCoursenum(String.valueOf(course.getCourse().getNum()));
			p.setEndweek(String.valueOf(course.getEndWeek()));
			//p.setId(id);
			p.setRoomname(course.getRoom().getNum());
			p.setRoomtype(course.getRoomType());
			p.setSemester(semester);
			p.setSlot(String.valueOf(course.getSlot()));
			p.setTeacherid(course.getTeacher().getIdentificationnum());
			p.setWeekday(String.valueOf(course.getWeekday()));
			sessionFactory.getCurrentSession().save(p);
		}
	}

	public List<SemesterChosenCourse> getChosenCourseByTeacherId(
			String teacherId, String semester) {
		String querystring = "from SemesterChosenCourse s where s.teacherid=:teacherid and s.semester=:semester ";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		query.setString("teacherid", String.valueOf(teacherId));
		query.setString("semester", semester);
		@SuppressWarnings("unchecked")
		List<SemesterChosenCourse> ret = (List<SemesterChosenCourse>)query.list();
		return ret;
	}

	public List<SemesterChosenCourse> getChosenCourseByClassNum(String classNum, String semester) {
		List<SemesterChosenCourse> ret = new ArrayList<SemesterChosenCourse>();
		for (SemesterChosenCourse course : semestercourselist()){
			//String names[] = course.getClass_().split("&").clone();
			for (String name : course.getClass_().split("&"))
				if (name.equals(classNum)){
					ret.add(course);
					break;
				}
		}
		return ret;
	}

	@Override
	public List<SemesterChosenCourse> getChosenCourseByCourseId(String courseId, String semester) {
		String querystring = "from SemesterChosenCourse s where s.coursenum=:coursenum and s.semester=:semester ";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		query.setString("coursenum", String.valueOf(courseId));
		query.setString("semester", semester);
		@SuppressWarnings("unchecked")
		List<SemesterChosenCourse> ret = (List<SemesterChosenCourse>)query.list();
		return ret;
	}

	public ClassesModel loadClassByID(String id) {
		String querystring = "from Classes s where s.id=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		query.setString("id", id);
		@SuppressWarnings("unchecked")
		List<Classes> ret = (List<Classes>)query.list();
		if (ret.size() == 0)
			return null;
		ClassesModel n =  new ClassesModel(ret.get(0).getClassname(),
				ret.get(0).getMajor(), 
				null,
				null,
				ret.get(0).getClassminitorid(),
				ret.get(0).getClassteacherid());
		n.setId(Integer.parseInt(id));
		return n;
	}

	public Course loadCourseByIdent(String ident) {
		String querystring = "from Course s where s.num=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		query.setString("id", ident);
		@SuppressWarnings("unchecked")
		List<Course> ret = (List<Course>)query.list();
		return ret.get(0);
	}

	@Override
	public void semestercourseteacheradd(SemesterChosenCourse semestercourse) {
		SemesterChosenCourse semesterChosenCourse = (SemesterChosenCourse)sessionFactory.getCurrentSession().load(SemesterChosenCourse.class, semestercourse.getId());
		semesterChosenCourse.setBegainweek(semestercourse.getBegainweek());
		semesterChosenCourse.setEndweek(semestercourse.getEndweek());
		semesterChosenCourse.setTeacherid(semestercourse.getTeacherid());
		sessionFactory.getCurrentSession().update(semesterChosenCourse);
	}

	@Override
	public void semesterteacherendadd(String identificationnum, Integer semestercourseid) {
		SemesterChosenCourse semesterChosenCourse = (SemesterChosenCourse)sessionFactory.getCurrentSession().load(SemesterChosenCourse.class, semestercourseid);
		semesterChosenCourse.setTeacherid(identificationnum);
		sessionFactory.getCurrentSession().update(semesterChosenCourse);
	}
	@SuppressWarnings("unchecked")
	@Override
	public Teacher loadteacherbyid(Integer id) {
		String querysString ="from Teacher t where t.identificationnum=:id";
		Query query = sessionFactory.getCurrentSession().createQuery(querysString);
		query.setInteger("id", id);
		List<Teacher> teachers = (List<Teacher>)query.list();
		if (teachers.size() > 0)
			return teachers.get(0);
		return null;
	}

	/* (non-Javadoc)
	 * @see com.tjpu.dao.ManageDao#semestercourseclassset(java.lang.Integer, java.lang.String)
	 */
	@Override
	public void semestercourseclassset(Integer id, String ids) {
		SemesterChosenCourse semesterChosenCourse = (SemesterChosenCourse)sessionFactory.getCurrentSession().load(SemesterChosenCourse.class, id);
		semesterChosenCourse.setClass_(ids);
		sessionFactory.getCurrentSession().update(semesterChosenCourse);
	}

	@Override
	public List<SemesterChosenClassroom> semesterRoomList(String semester) {
		String querystring = "from SemesterChosenClassroom s where s.semester=:semester";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		query.setString("semester", semester);
		@SuppressWarnings("unchecked")
		List<SemesterChosenClassroom> semestercourselist = (List<SemesterChosenClassroom>)query.list();
		return semestercourselist;
	}

	@Override
	public List<SemesterChosenCourse> semesterCourseList(String semester) {
		String querystring = "from SemesterChosenCourse s where s.semester=:semester";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		query.setString("semester", semester);
		@SuppressWarnings("unchecked")
		List<SemesterChosenCourse> semestercourselist = (List<SemesterChosenCourse>)query.list();
		return semestercourselist;
	}

	public List<ChosenCourse> stuSyllabusList(String id, String semester) {
		String querystring = "from ChosenCourse s where s.stuid=:id and s.semester=:semester";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		query.setString("semester", semester);
		query.setInteger("id", Integer.parseInt(id));
		@SuppressWarnings("unchecked")
		List<ChosenCourse> ret = (List<ChosenCourse>)query.list();
		return ret;
	}

	public List<Adjustcourse> adjustRecord(String semester) {
		//String querystring = "from Adjustcourse s where s.semester=:semester";
		String querystring = "from Adjustcourse s";
		Query query = sessionFactory.getCurrentSession().createQuery(querystring);
		//query.setString("semester", semester);
		@SuppressWarnings("unchecked")
		List<Adjustcourse> ret = (List<Adjustcourse>)query.list();
		return ret;
	}

	public void approveAdjust(Integer id) {
		Adjustcourse apply = (Adjustcourse)sessionFactory.getCurrentSession().load(Adjustcourse.class, id);
		apply.setStatus("1");
		sessionFactory.getCurrentSession().update(apply);	
	}

	public void disapproveAdjust(Integer id) {
		Adjustcourse apply = (Adjustcourse)sessionFactory.getCurrentSession().load(Adjustcourse.class, id);
		apply.setStatus("2");
		sessionFactory.getCurrentSession().update(apply);	
	}
	
}
