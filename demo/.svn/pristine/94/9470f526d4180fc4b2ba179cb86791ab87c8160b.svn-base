package com.tjpu.action;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.jms.Session;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FileUtils;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import com.google.gson.Gson;
import com.opensymphony.xwork2.ActionContext;
import com.tjpu.bean.Assistantteacher;
import com.tjpu.bean.ClassRecord;
import com.tjpu.bean.Classes;
import com.tjpu.bean.Classroom;
import com.tjpu.bean.Course;
import com.tjpu.bean.Performance;
import com.tjpu.bean.Student;
import com.tjpu.bean.User;
import com.tjpu.service.ClassService;

@Controller
public class ClassAction {
	@Autowired
	ClassService classService;
	private Classes cls;
	private Classroom room;
	private Course course;
	private ClassRecord classrecord;
	private Performance performance;	
	private Assistantteacher assistantteacher;
    private File file;
    private String fileFileName;
    private int classid;
    private String ids;
    public Performance getPerformance() {
		return performance;
	}
	public void setPerformance(Performance performance) {
		this.performance = performance;
	}
	public File getFile() {
		return file;
	}
	public void setFile(File file) {
		this.file = file;
	}
	public String getFileFileName() {
		return fileFileName;
	}
	public void setFileFileName(String fileFileName) {
		this.fileFileName = fileFileName;
	}
	public Course getCourse() {
		return course;
	}
	public void setCourse(Course course) {
		this.course = course;
	}	
	public String getIds() {
		return ids;
	}
	public void setIds(String ids) {
		this.ids = ids;
	}	
	public int getClassid() {
		return classid;
	}
	public void setClassid(int classid) {
		this.classid = classid;
	}
	public Classes getCls() {
		return cls;
	}
	public void setCls(Classes cls) {
		this.cls = cls;
	}
	public Classroom getRoom() {
		return room;
	}
	public void setRoom(Classroom room) {
		this.room = room;
	}
	public Assistantteacher getAssistantteacher() {
		return assistantteacher;
	}
	public void setAssistantteacher(Assistantteacher assistantteacher) {
		this.assistantteacher = assistantteacher;
	}
	
	
	
	private void datatojson(Map<String, Object> map) {
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("application/json;charset=utf-8");
		Gson gson = new Gson();
		String json = gson.toJson(map);
		// System.out.print(json);
		PrintWriter out;
		try {
			out = response.getWriter();
			out.write(json);
			out.flush();
			out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public String classmanage() {
		String classlist = classService.classlist();
		//String classteacherlist = classService.classteacherlist();
		//String assistteacherlist = classService.assistteacherlist();
		ActionContext.getContext().put("classlist", classlist);
		return "classlist";
	}

	public String classstulist() {
		classService.loadstulistbyclassid(cls.getId());
		//System.out.println(cls.getId());
		ActionContext.getContext().put("classesid", cls.getId());
		return "classstulist";
	}
	public String graduatestulist(){
		classService.loadstulistbyclassid(cls.getId());
		return "graduatestulist";
	}
	public String classminitorset(){
		Integer id = Integer.valueOf(ids);
		classService.classminitorset(cls.getId(),id);
		return null;
	}
	
	public String loadclassstu(){
		HttpServletRequest request = ServletActionContext.getRequest();
		int page = Integer.parseInt(request.getParameter("page"));
		int pageSize = Integer.parseInt(request.getParameter("pagesize"));
		Map<String, Object> map = classService.classstumap(page, pageSize);
		datatojson(map);
		return null;
	}
	public String classbatchadd(){
		return "classbatchadd";
	}
	public String classaddbytxt(){
		String realpath = ServletActionContext.getServletContext().getRealPath("/upload");
		Date dt = new Date();
		SimpleDateFormat mt2 = new SimpleDateFormat("yyMMddHHmmss");
		String s = mt2.format(dt);
		for (int i = 0; i < 3; i++) {
			Random r = new Random();
			int ran = r.nextInt(10);
			s += ran;
		}
		if (file != null) {
			File savedir = new File(realpath);
			String name = fileFileName.substring(fileFileName.indexOf('.'));
			String filename = s.concat(name);
			System.out.println(filename);
			if (!savedir.exists())
				savedir.mkdirs();
			try {
				File savefile = new File(savedir, filename);
				FileUtils.copyFile(file, savefile);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ActionContext.getContext().put("msg", "添加成功");
			classService.classaddbytxt(realpath + "\\" + filename);
		} else {
			ActionContext.getContext().put("msg", "添加失败,退出请重新添加！");
		}
		return "uploadmsg";
	}
	public String classbeginadd() {
		return "classadd";
	}

	public String classcheck() {
		HttpServletResponse response = ServletActionContext.getResponse();
		boolean flg = classService.classcheck(cls.getClassname());
		if (!flg) {
			try {
				response.setContentType("text/html;charset=utf-8");
				PrintWriter out = response.getWriter();
				out.print("fail");
				out.flush();
				out.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}

	public String classendadd() {
		classService.classadd(cls);
		return null;
	}
    public String classedit(){
    	ActionContext.getContext().put("classes", cls);
    	return "classedit";
    }
	public String classupdate() {
		classService.classupdate(cls);
		return null;
	}

	public String classdelete() {
		classService.classdelete(cls.getId());
		return null;
	}
	
	public String assistantteachermanage(){
		return "assistantteachermanage";
	}
	
	
	public String coursemanage() {
		String coursecredit = "{\"Coursecredit\":" + "\"" + 1 + "\"}" + "," + "{\"Coursecredit\":" + "\"" + 2 + "\"}" + "," + "{\"Coursecredit\":" + "\"" + 3 + "\"}" + "," + "{\"Coursecredit\":" + "\"" + 4 + "\"}" + "," + "{\"Coursecredit\":" + "\""
				+ 5 + "\"}" + "," + "{\"Coursecredit\":" + "\"" + 6 + "\"}" + "," + "{\"Coursecredit\":" + "\"" + 7 + "\"}";
		String char1 = "必修", char2 = "现选", char3 = "任选";
		String character = "{\"Coursecharacter\":" + "\"" + char1 + "\"}" + "," + "{\"Coursecharacter\":" + "\"" + char2 + "\"}" + "," + "{\"Coursecharacter\":" + "\"" + char3 + "\"}";
		String s1 = "集中式", s2 = "非集中式";
		String checkway = "{\"Coursecheckway\":" + "\"" + s1 + "\"}" + "," + "{\"Coursecheckway\":" + "\"" + s2 + "\"}";
		ActionContext.getContext().put("coursecredit", coursecredit);
		ActionContext.getContext().put("character", character);
		ActionContext.getContext().put("checkway", checkway);
		return "courselist";
	}

	public String courselist() {
		HttpServletRequest request = ServletActionContext.getRequest();
		int page = Integer.parseInt(request.getParameter("page"));
		int pageSize = Integer.parseInt(request.getParameter("pagesize"));
		Map<String, Object> map = classService.courselist(page, pageSize);
		datatojson(map);
		return null;
	}

	public String courselistmanage(){
		String coursecredit = "{\"Coursecredit\":" + "\"" + 1 + "\"}" + "," + "{\"Coursecredit\":" + "\"" + 2 + "\"}" + "," + "{\"Coursecredit\":" + "\"" + 3 + "\"}" + "," + "{\"Coursecredit\":" + "\"" + 4 + "\"}" + "," + "{\"Coursecredit\":" + "\""
				+ 5 + "\"}" + "," + "{\"Coursecredit\":" + "\"" + 6 + "\"}" + "," + "{\"Coursecredit\":" + "\"" + 7 + "\"}";
		String char1 = "必修", char2 = "现选", char3 = "任选";
		String character = "{\"Coursecharacter\":" + "\"" + char1 + "\"}" + "," + "{\"Coursecharacter\":" + "\"" + char2 + "\"}" + "," + "{\"Coursecharacter\":" + "\"" + char3 + "\"}";
		String s1 = "集中式", s2 = "非集中式";
		String checkway = "{\"Coursecheckway\":" + "\"" + s1 + "\"}" + "," + "{\"Coursecheckway\":" + "\"" + s2 + "\"}";
		ActionContext.getContext().put("coursecredit", coursecredit);
		ActionContext.getContext().put("character", character);
		ActionContext.getContext().put("checkway", checkway);
		return "coursestulist";
	}
	
	public String coursestulist(){
		HttpServletRequest request = ServletActionContext.getRequest();
		int page = Integer.parseInt(request.getParameter("page"));
		int pageSize = Integer.parseInt(request.getParameter("pagesize"));
		Map<String, Object> map = classService.courselist(page, pageSize);
		datatojson(map);
		return null;
	}
	public String coursebeginadd() {
		return "courseadd";
	}

	public String coursecheck() {
		HttpServletResponse response = ServletActionContext.getResponse();
		boolean flg = classService.coursecheck(course.getCoursename());
		if (!flg) {
			try {
				response.setContentType("text/html;charset=utf-8");
				PrintWriter out = response.getWriter();
				out.print("fail");
				out.flush();
				out.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}

	public String coursecheck1() {
		HttpServletResponse response = ServletActionContext.getResponse();
		boolean flg = classService.coursecheck1(course.getNum());
		if (!flg) {
			try {
				response.setContentType("text/html;charset=utf-8");
				PrintWriter out = response.getWriter();
				out.print("fail");
				out.flush();
				out.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}

	public String courseendadd() {
		classService.courseadd(course);
		return null;
	}
    public String courseedit(){
    	ActionContext.getContext().put("course", course);
    	return "courseedit";
    }
	
	public String courseupdate() {
		classService.courseupdate(course);
		return null;
	}

	public String coursedelete() {
		classService.coursedelete(course.getId());
		return null;
	}
	public String clsroommanage(){
		return "classroomlist";
	}
	public String roomlist() {
		HttpServletRequest request = ServletActionContext.getRequest();
		int page = Integer.parseInt(request.getParameter("page"));
		int pageSize = Integer.parseInt(request.getParameter("pagesize"));
		Map<String, Object> map = classService.roomlist(page, pageSize);
		datatojson(map);
		return null;
	}

	public String roombeginadd() {
		return "roomadd";
	}

	public String roomcheck() {
		HttpServletResponse response = ServletActionContext.getResponse();
		boolean flg = classService.roomcheck(room.getNum());
		if (!flg) {
			try {
				response.setContentType("text/html;charset=utf-8");
				PrintWriter out = response.getWriter();
				out.print("fail");
				out.flush();
				out.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}
	public String  roomsearch(){
		List<Classroom> classroom = classService.roomsearch(room);
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html;charset=utf-8");
		StringBuffer strb=new StringBuffer(); 
		strb.append("<table id='resultlist' >");
		strb.append("<tr class='resultlist_tr'>");
		strb.append("<td>"+"名称"+"</td>"); 
		strb.append("<td>"+"位置"+"</td>"); 
		strb.append("<td>"+"标准容量(人)"+"</td>"); 
		strb.append("<td>"+"实际容量（人）"+"</td>");
		strb.append("<td widt='50'>"+"备注"+"</td>");
		strb.append("</tr>"); 
		  for(int i=0;i<classroom.size();i++){  
			strb.append("<tr>");
		    strb.append("<td>"+classroom.get(i).getRoomname()+"</td>");
		    strb.append("<td>"+classroom.get(i).getRoomplace()+"</td>");
		    strb.append("<td>"+classroom.get(i).getRoomcapacity()+"</td>");
		    strb.append("<td>"+classroom.get(i).getRealcapacity()+"</td>");
		    strb.append("<td>"+classroom.get(i).getNote()+"</td>");
		    strb.append("</tr>"); 		    
		   }  	
		  strb.append("</table>"); 	  
		   try {
			PrintWriter out = response.getWriter();
			out.write(strb.toString());
			 out.flush();    //刷新打印流
		     out.close();    //关闭
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}  
		   return null;
	}
    public String assistteacherlist(){
    	return "assistantteacherlist";
    }
    public String assistprint(){
    	Assistantteacher assist = classService.loadassistbyid(assistantteacher.getId());
    	ActionContext.getContext().put("assistteacher", assist);
    	return "assistprint";
    }
    public String assistapply(){
    	return "assistapply";
    }
    public String assistagree(){
    	classService.assistagree(assistantteacher.getId());
    	return null;
    }
    public String assistagainst(){
    	classService.assistagainst(assistantteacher.getId());
    	return null;
    }
    
    public String assistlist(){
    	HttpServletRequest request = ServletActionContext.getRequest();
		int page = Integer.parseInt(request.getParameter("page"));
		int pageSize = Integer.parseInt(request.getParameter("pagesize"));
		Map<String, Object> map = classService.assistmap(page, pageSize);
		datatojson(map);
		return null;
    }
    
    public String assistantteacheradd(){
    	classService.assistantteacherapply(assistantteacher);
    	return null;
    }
	public String clsroomload(){
		
		return "clsroomload";
	}
	
	public String roomendadd() {
		classService.roomadd(room);
		return null;
	}
    public String roomedit(){
    	ActionContext.getContext().put("classroom", room);
    	return "classroomedit";
    }
	public String roomupdate() {
		classService.roomupdate(room);
		return null;
	}

	public String roomdelete() {
		classService.roomdelete(room.getId());
		return null;
	}
	public String curriculum(){
		return "curriculum";
	}
    public String classteacherworkrecord(){
    	return "classteacherworkrecord";
    }
    public String workrecordlist(){
    	HttpServletRequest request = ServletActionContext.getRequest();
		int page = Integer.parseInt(request.getParameter("page"));
		int pageSize = Integer.parseInt(request.getParameter("pagesize"));
		Map<String, Object> map = classService.workrecordmap(page, pageSize);
		datatojson(map);
		return null;
    }
    public String workrecordedit(){
    	User user = (User) ActionContext.getContext().getSession().get("user");
    	Classes teacherclass = classService.classteacherclass(user.getId());
    	Student student = classService.loadminitor(teacherclass.getClassminitorid());
    	ActionContext.getContext().put("student", student);
    	ActionContext.getContext().put("teacherclass", teacherclass);
    	ClassRecord classrecords = classService.loadworkrecord(classrecord.getId());
    	ActionContext.getContext().put("workrecord", classrecords);
    	return "workrecordedit";
    }
    public String workrecordupdate(){
    	classService.workrecordedit(classrecord);
    	return null;
    }
    public String workrecorddelete(){
    	classService.workrecorddelete(ids);
    	return null;
    }
    public String workrecordbegainadd(){
    	User user = (User) ActionContext.getContext().getSession().get("user");
    	Classes teacherclass = classService.classteacherclass(user.getId());
    	Student student = classService.loadminitor(teacherclass.getClassminitorid());
    	ActionContext.getContext().put("student", student);
    	ActionContext.getContext().put("teacherclass", teacherclass);
    	return "workrecordadd";
    }
    public String workrecordendadd(){
    	classService.workrecordadd(classrecord);
    	return null;
    }
    public String workrecorddetail(){
    	User user = (User) ActionContext.getContext().getSession().get("user");
    	Classes teacherclass = classService.classteacherclass(user.getId());
    	Student student = classService.loadminitor(teacherclass.getClassminitorid());
    	ActionContext.getContext().put("student", student);
    	ActionContext.getContext().put("teacherclass", teacherclass);
    	ClassRecord classrecords = classService.workrecorddetail(classrecord.getId());
    	ActionContext.getContext().put("workrecord", classrecords);
    	return "workrecorddetail";
    }
    public String studentsituation(){
    	return "studentsituation";
    }
    public String performancelist(){
    	HttpServletRequest request = ServletActionContext.getRequest();
		int page = Integer.parseInt(request.getParameter("page"));
		int pageSize = Integer.parseInt(request.getParameter("pagesize"));
		Map<String, Object> map = classService.performancemap(page, pageSize);
		datatojson(map);
		return null;
    }
    public String performancebegainadd(){
    	return "performanceadd";
    }
    public String performanceendadd(){
    	classService.performanceadd(performance);
    	return null;
    }
    public String performanceedit(){
    	ActionContext.getContext().put("performance", performance);
    	return "performanceedit";
    }
    public String performanceupdate(){
    	classService.performanceupdate(performance);
    	return null;
    }
    public String performancedelete(){
    	classService.performancedelete(ids);
    	return null;
    }
	public ClassRecord getClassrecord() {
		return classrecord;
	}
	public void setClassrecord(ClassRecord classrecord) {
		this.classrecord = classrecord;
	}
}
